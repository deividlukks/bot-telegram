"""
Finance Bot - Bot de Finan√ßas Pessoais para Telegram
Sistema principal melhorado com recursos avan√ßados
"""
import asyncio
import logging
import signal
import sys
from pathlib import Path
from typing import Optional
import traceback

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

from config import Config
from database import init_database, db
from utils import app_cache

# Importar servi√ßos
from services import UserService, TransactionService
try:
    from services.report_service import get_formatted_monthly_report, clear_user_cache
except ImportError:
    # Fallback se n√£o conseguir importar
    def get_formatted_monthly_report(session, user, year=None, month=None):
        return "üìä Relat√≥rio n√£o dispon√≠vel"
    
    def clear_user_cache(user_id):
        pass

# Importar handlers
from handlers.main import (
    start_command, main_menu_handler,
    help_command, cancel_command
)
from handlers.finance import (
    finance_menu_handler,
    transaction_type_callback, transaction_amount_handler,
    transaction_description_handler, transaction_payment_method_handler,
    transaction_date_handler, transaction_category_handler,
    category_name_handler
)
from handlers.investment import (
    investment_menu_handler,
    investment_type_handler, investment_ticker_handler,
    investment_quantity_handler, investment_price_handler,
    investment_confirm_handler
)
from handlers.settings import (
    settings_menu_handler,
    settings_callback_handler
)

# Importar callbacks se dispon√≠vel
try:
    from handlers.callbacks import CallbackRouter
except ImportError:
    # Fallback se n√£o tiver callbacks
    class CallbackRouter:
        @staticmethod
        async def route_callback(update, context):
            query = update.callback_query
            if query:
                await query.answer("Callback n√£o implementado")
            return

from states import ConversationStates, CallbackActions


# Configurar logging avan√ßado
def setup_logging():
    """Configura sistema de logging avan√ßado"""
    
    # Criar formatador personalizado
    class ColoredFormatter(logging.Formatter):
        """Formatador com cores para diferentes n√≠veis"""
        
        COLORS = {
            'DEBUG': '\033[36m',    # Cyan
            'INFO': '\033[32m',     # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m',    # Red
            'CRITICAL': '\033[35m', # Magenta
        }
        RESET = '\033[0m'
        
        def format(self, record):
            if hasattr(record, 'levelname'):
                color = self.COLORS.get(record.levelname, '')
                record.levelname = f"{color}{record.levelname}{self.RESET}"
            return super().format(record)
    
    # Configurar logger raiz
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, Config.LOG_LEVEL))
    
    # Remover handlers existentes
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Handler para console
    console_handler = logging.StreamHandler(sys.stdout)
    if sys.stdout.isatty():  # Se √© um terminal, usar cores
        console_formatter = ColoredFormatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    else:
        console_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)
    
    # Handler para arquivo (se configurado)
    if Config.LOG_FILE:
        try:
            log_file_path = Path(Config.LOG_FILE)
            log_file_path.parent.mkdir(parents=True, exist_ok=True)
            
            file_handler = logging.FileHandler(Config.LOG_FILE, encoding='utf-8')
            file_formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
            )
            file_handler.setFormatter(file_formatter)
            root_logger.addHandler(file_handler)
        except Exception as e:
            logging.error(f"Erro ao configurar log em arquivo: {e}")
    
    # Configurar loggers espec√≠ficos
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.INFO)
    logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)


logger = logging.getLogger(__name__)


class BotApplication:
    """Classe principal do bot com recursos avan√ßados"""
    
    def __init__(self):
        self.application: Optional[Application] = None
        self.is_running = False
        self.shutdown_event = asyncio.Event()
    
    async def initialize(self) -> None:
        """Inicializa o bot e todos os componentes"""
        try:
            logger.info("üöÄ Inicializando Finance Bot...")
            
            # Validar configura√ß√µes
            Config.validate()
            logger.info("‚úÖ Configura√ß√µes validadas")
            
            # Inicializar banco de dados
            init_database()
            logger.info("‚úÖ Banco de dados inicializado")
            
            # Criar aplica√ß√£o do bot
            self.application = self._create_application()
            logger.info("‚úÖ Aplica√ß√£o do bot criada")
            
            # Configurar comandos do bot
            await self._setup_bot_commands()
            logger.info("‚úÖ Comandos do bot configurados")
            
            # Configurar handlers de sistema
            self._setup_system_handlers()
            logger.info("‚úÖ Sistema inicializado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
            logger.error(traceback.format_exc())
            raise
    
    def _create_application(self) -> Application:
        """Cria e configura a aplica√ß√£o do bot"""
        
        # Configura√ß√µes avan√ßadas do bot
        app_builder = Application.builder()
        app_builder.token(Config.BOT_TOKEN)
        app_builder.concurrent_updates(True)  # Permitir updates concorrentes
        app_builder.connection_pool_size(10)  # Pool de conex√µes
        app_builder.read_timeout(30)
        app_builder.write_timeout(30)
        app_builder.connect_timeout(30)
        app_builder.pool_timeout(20)
        
        application = app_builder.build()
        
        # Configurar conversation handler principal
        conv_handler = self._create_conversation_handler()
        application.add_handler(conv_handler)
        
        # Handlers de comandos globais
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel_command))
        
        # Handlers especiais
        application.add_handler(CommandHandler("status", self._status_command))
        application.add_handler(CommandHandler("clear_cache", self._clear_cache_command))
        
        # Handler principal de callbacks
        application.add_handler(CallbackQueryHandler(CallbackRouter.route_callback))
        
        # Handler de erro global
        application.add_error_handler(self._advanced_error_handler)
        
        # Configurar callbacks do ciclo de vida
        application.post_init = self._post_init
        application.post_shutdown = self._post_shutdown
        
        return application
    
    def _create_conversation_handler(self) -> ConversationHandler:
        """Cria o conversation handler principal"""
        
        return ConversationHandler(
            entry_points=[
                CommandHandler("start", start_command),
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)
            ],
            states={
                # Menus principais
                ConversationStates.MAIN_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)
                ],
                
                # Menu de finan√ßas
                ConversationStates.FINANCE_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, finance_menu_handler)
                ],
                
                # Fluxo de transa√ß√£o
                ConversationStates.TRANSACTION_TYPE: [
                    CallbackQueryHandler(
                        transaction_type_callback,
                        pattern=f"^(transaction_|{CallbackActions.CANCEL}).*"
                    )
                ],
                ConversationStates.TRANSACTION_AMOUNT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, transaction_amount_handler)
                ],
                ConversationStates.TRANSACTION_DESCRIPTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, transaction_description_handler)
                ],
                ConversationStates.TRANSACTION_PAYMENT_METHOD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, transaction_payment_method_handler)
                ],
                ConversationStates.TRANSACTION_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, transaction_date_handler)
                ],
                ConversationStates.TRANSACTION_CATEGORY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, transaction_category_handler)
                ],
                ConversationStates.CATEGORY_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, category_name_handler)
                ],
                
                # Menu de investimentos
                ConversationStates.INVESTMENT_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, investment_menu_handler)
                ],
                
                # Fluxo de investimento
                ConversationStates.INVESTMENT_TYPE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, investment_type_handler)
                ],
                ConversationStates.INVESTMENT_TICKER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, investment_ticker_handler)
                ],
                ConversationStates.INVESTMENT_QUANTITY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, investment_quantity_handler)
                ],
                ConversationStates.INVESTMENT_PRICE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, investment_price_handler)
                ],
                ConversationStates.INVESTMENT_CONFIRM: [
                    CallbackQueryHandler(investment_confirm_handler)
                ],
                
                # Menu de configura√ß√µes
                ConversationStates.SETTINGS_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, settings_menu_handler),
                    CallbackQueryHandler(settings_callback_handler)
                ],
                
                # Estados especiais
                ConversationStates.WAITING_CONFIRMATION: [
                    CallbackQueryHandler(CallbackRouter.route_callback)
                ],
                ConversationStates.SHOWING_HELP: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler),
                    CallbackQueryHandler(CallbackRouter.route_callback)
                ],
            },
            fallbacks=[
                CommandHandler("cancel", cancel_command),
                CommandHandler("start", start_command),
                CommandHandler("help", help_command),
                MessageHandler(filters.COMMAND, self._unknown_command)
            ],
            allow_reentry=True,
            name="main_conversation",
            persistent=False,
            per_chat=True,
            per_user=True,
            per_message=False,
            conversation_timeout=1800,  # 30 minutos
            block=False  # N√£o bloquear processamento
        )
    
    async def _setup_bot_commands(self) -> None:
        """Configura comandos do bot no Telegram"""
        commands = [
            BotCommand("start", "Iniciar o bot"),
            BotCommand("help", "Obter ajuda"),
            BotCommand("cancel", "Cancelar opera√ß√£o atual"),
            BotCommand("status", "Status do bot"),
            BotCommand("clear_cache", "Limpar cache (admin)"),
        ]
        
        await self.application.bot.set_my_commands(commands)
        logger.info("‚úÖ Comandos do bot configurados")
    
    def _setup_system_handlers(self) -> None:
        """Configura handlers de sistema"""
        
        # Handler para sinais do sistema
        def signal_handler(signum, frame):
            logger.info(f"Sinal {signum} recebido. Iniciando shutdown...")
            self.shutdown_event.set()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        if hasattr(signal, 'SIGHUP'):
            signal.signal(signal.SIGHUP, signal_handler)
    
    async def _post_init(self, application: Application) -> None:
        """Executado ap√≥s inicializa√ß√£o do bot"""
        try:
            bot_info = await application.bot.get_me()
            logger.info(f"ü§ñ Bot inicializado: @{bot_info.username} (ID: {bot_info.id})")
            
            # Verificar se o bot tem as permiss√µes necess√°rias
            await self._check_bot_permissions()
            
            # Limpar cache antigo
            app_cache.clear()
            
            logger.info("üéâ Finance Bot est√° pronto para uso!")
            
        except Exception as e:
            logger.error(f"Erro no post_init: {e}")
    
    async def _post_shutdown(self, application: Application) -> None:
        """Executado antes do shutdown"""
        try:
            logger.info("üõë Iniciando shutdown do bot...")
            
            # Limpar caches
            app_cache.clear()
            clear_user_cache(-1)  # Limpar todos os caches
            
            # Fechar conex√µes do banco
            db.cleanup()
            
            logger.info("‚úÖ Shutdown conclu√≠do com sucesso")
            
        except Exception as e:
            logger.error(f"Erro no shutdown: {e}")
    
    async def _check_bot_permissions(self) -> None:
        """Verifica se o bot tem as permiss√µes necess√°rias"""
        try:
            # Teste b√°sico de envio de mensagem
            # Em produ√ß√£o, voc√™ poderia enviar para um grupo de admin
            pass
        except Exception as e:
            logger.warning(f"Aviso sobre permiss√µes: {e}")
    
    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Comando de status do bot"""
        try:
            with db.get_session() as session:
                # Estat√≠sticas b√°sicas
                from models import User, Transaction, Investment
                
                user_count = session.query(User).count()
                transaction_count = session.query(Transaction).count()
                investment_count = session.query(Investment).count()
            
            uptime = "Em execu√ß√£o"  # Calcular uptime real se necess√°rio
            
            status_message = f"""
ü§ñ *Status do Finance Bot*

üìä *Estat√≠sticas:*
‚Ä¢ Usu√°rios: {user_count:,}
‚Ä¢ Transa√ß√µes: {transaction_count:,}
‚Ä¢ Investimentos: {investment_count:,}

‚öôÔ∏è *Sistema:*
‚Ä¢ Uptime: {uptime}
‚Ä¢ Cache: {len(app_cache.cache)} itens
‚Ä¢ Vers√£o: 2.0.0

üîß *Configura√ß√µes:*
‚Ä¢ Ambiente: {Config.ENVIRONMENT}
‚Ä¢ Debug: {Config.DEBUG}
‚Ä¢ Log Level: {Config.LOG_LEVEL}
"""
            
            await update.message.reply_text(
                status_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro no comando status: {e}")
            await update.message.reply_text("‚ùå Erro ao obter status")
    
    async def _clear_cache_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Comando para limpar cache (admin only)"""
        try:
            # Verifica√ß√£o b√°sica de admin (melhorar em produ√ß√£o)
            user_id = update.effective_user.id
            
            # Lista de admins (configurar em produ√ß√£o)
            admin_ids = [123456789]  # Substituir por IDs reais
            
            if user_id not in admin_ids:
                await update.message.reply_text("‚ùå Comando apenas para administradores")
                return
            
            # Limpar caches
            items_cleared = len(app_cache.cache)
            app_cache.clear()
            clear_user_cache(user_id)
            
            await update.message.reply_text(
                f"‚úÖ Cache limpo! {items_cleared} itens removidos."
            )
            
        except Exception as e:
            logger.error(f"Erro ao limpar cache: {e}")
            await update.message.reply_text("‚ùå Erro ao limpar cache")
    
    async def _unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handler para comandos desconhecidos"""
        command = update.message.text
        logger.warning(f"Comando desconhecido: {command} do usu√°rio {update.effective_user.id}")
        
        await update.message.reply_text(
            f"‚ùì Comando `{command}` n√£o reconhecido.\n\n"
            "Use /help para ver comandos dispon√≠veis.",
            parse_mode='Markdown'
        )
        
        return ConversationStates.MAIN_MENU
    
    async def _advanced_error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handler avan√ßado de erros"""
        try:
            error = context.error
            logger.error(f"Erro no bot: {error}")
            logger.error(traceback.format_exc())
            
            # Tentar notificar o usu√°rio se poss√≠vel
            if isinstance(update, Update) and update.effective_message:
                try:
                    await update.effective_message.reply_text(
                        "‚ùå Ocorreu um erro inesperado.\n\n"
                        "Por favor, tente novamente ou use /start para reiniciar."
                    )
                except Exception as notify_error:
                    logger.error(f"Erro ao notificar usu√°rio: {notify_error}")
            
            # Em desenvolvimento, re-raise para debugging
            if Config.DEBUG:
                raise error
                
        except Exception as handler_error:
            logger.critical(f"Erro no error handler: {handler_error}")
    
    async def run(self) -> None:
        """Executa o bot"""
        try:
            await self.initialize()
            
            logger.info("üöÄ Finance Bot iniciando...")
            print(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           FINANCE BOT v2.0            ‚ïë
‚ïë                                       ‚ïë
‚ïë  ü§ñ Bot iniciado com sucesso!         ‚ïë
‚ïë  üì± Pressione Ctrl+C para parar       ‚ïë
‚ïë  üîß Ambiente: {Config.ENVIRONMENT:<19} ‚ïë
‚ïë  üìä Debug: {str(Config.DEBUG):<22} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
            
            self.is_running = True
            
            # Iniciar bot com polling
            await self.application.initialize()
            await self.application.start()
            
            # Executar polling at√© receber sinal de shutdown
            await self.application.updater.start_polling(
                allowed_updates=None,
                drop_pending_updates=True
            )
            
            # Aguardar sinal de shutdown
            await self.shutdown_event.wait()
            
        except KeyboardInterrupt:
            logger.info("üëã Shutdown solicitado pelo usu√°rio")
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico: {e}")
            logger.error(traceback.format_exc())
        finally:
            await self._shutdown()
    
    async def _shutdown(self) -> None:
        """Processo de shutdown do bot"""
        try:
            if self.is_running:
                logger.info("üõë Parando o bot...")
                self.is_running = False
                
                if self.application:
                    await self.application.updater.stop()
                    await self.application.stop()
                    await self.application.shutdown()
                
                logger.info("‚úÖ Bot parado com sucesso")
            
        except Exception as e:
            logger.error(f"Erro no shutdown: {e}")


async def main():
    """Fun√ß√£o principal"""
    try:
        # Configurar logging
        setup_logging()
        
        # Criar e executar aplica√ß√£o do bot
        bot_app = BotApplication()
        await bot_app.run()
        
    except KeyboardInterrupt:
        logger.info("üëã Shutdown solicitado pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico na inicializa√ß√£o: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)
    finally:
        logger.info("üèÅ Finance Bot finalizado")


if __name__ == '__main__':
    try:
        # Verificar vers√£o do Python
        if sys.version_info < (3, 8):
            print("‚ùå Python 3.8+ √© necess√°rio")
            sys.exit(1)
        
        # Executar bot
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\nüëã Bot interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)