"""
Handlers para funcionalidades de finan√ßas pessoais
"""
import logging
from datetime import datetime, timedelta
from decimal import Decimal, InvalidOperation

from telegram import Update
from telegram.ext import ContextTypes

from config import Config, Messages, Emojis
from database import db
from keyboards import Keyboards
from models import TransactionType, Category
from services import TransactionService, CategoryService, UserService
from states import ConversationStates
from utils import (
    parse_amount, format_currency, parse_date,
    get_user_from_update, validate_amount
)

logger = logging.getLogger(__name__)


async def finance_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe o menu de finan√ßas"""
    await update.message.reply_text(
        "*üí∞ Finan√ßas Pessoais*\n\n"
        "Escolha uma op√ß√£o para gerenciar suas finan√ßas:",
        parse_mode='Markdown',
        reply_markup=Keyboards.finance_menu()
    )
    return ConversationStates.FINANCE_MENU


async def finance_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa as op√ß√µes do menu de finan√ßas"""
    if not update.message or not update.message.text:
        return ConversationStates.FINANCE_MENU
    
    text = update.message.text
    
    if text == '‚ûï Novo Lan√ßamento':
        return await start_new_transaction(update, context)
    
    elif text == 'üìã Ver Lan√ßamentos':
        return await show_transactions(update, context)
    
    elif text == 'üìä Resumo Financeiro':
        return await show_financial_summary(update, context)
    
    elif text == 'üè∑Ô∏è Categorias':
        return await show_categories(update, context)
    
    elif text == 'üìà An√°lise Detalhada':
        return await show_detailed_analysis(update, context)
    
    elif text == 'üí° Dicas':
        return await show_financial_tips(update, context)
    
    elif text == f'{Emojis.BACK} Menu Principal':
        from .main import main_menu
        return await main_menu(update, context)
    
    return ConversationStates.FINANCE_MENU


# ==================== NOVA TRANSA√á√ÉO ====================

async def start_new_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Inicia o processo de nova transa√ß√£o"""
    await update.message.reply_text(
        "*Nova Transa√ß√£o*\n\n"
        "Que tipo de lan√ßamento voc√™ deseja fazer?",
        parse_mode='Markdown',
        reply_markup=Keyboards.transaction_type()
    )
    return ConversationStates.TRANSACTION_TYPE


async def transaction_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa a escolha do tipo de transa√ß√£o"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text(Messages.CANCELLED)
        return await finance_menu(query, context)
    
    # Armazenar tipo escolhido
    if query.data == "transaction_income":
        context.user_data['transaction_type'] = TransactionType.INCOME
        type_name = "Receita"
    else:
        context.user_data['transaction_type'] = TransactionType.EXPENSE
        type_name = "Despesa"
    
    await query.edit_message_text(
        f"*Nova {type_name}*\n\n{Messages.ASK_AMOUNT}",
        parse_mode='Markdown'
    )
    
    return ConversationStates.TRANSACTION_AMOUNT


async def transaction_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa o valor da transa√ß√£o"""
    if not update.message or not update.message.text:
        return ConversationStates.TRANSACTION_AMOUNT
    
    # Cancelar
    if update.message.text == f'{Emojis.ERROR} Cancelar':
        await update.message.reply_text(Messages.CANCELLED)
        context.user_data.clear()
        return await finance_menu(update, context)
    
    try:
        # Tentar parsear o valor
        amount = parse_amount(update.message.text)
        
        # Validar limites
        validation_error = validate_amount(amount)
        if validation_error:
            await update.message.reply_text(validation_error)
            return ConversationStates.TRANSACTION_AMOUNT
        
        # Armazenar valor
        context.user_data['amount'] = amount
        
        # Pedir descri√ß√£o
        await update.message.reply_text(
            f"Valor: {format_currency(amount)}\n\n"
            f"{Messages.ASK_DESCRIPTION}",
            reply_markup=Keyboards.cancel_only()
        )
        
        return ConversationStates.TRANSACTION_DESCRIPTION
        
    except (ValueError, InvalidOperation):
        await update.message.reply_text(Messages.ERROR_INVALID_AMOUNT)
        return ConversationStates.TRANSACTION_AMOUNT


async def transaction_description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa a descri√ß√£o da transa√ß√£o"""
    if not update.message or not update.message.text:
        return ConversationStates.TRANSACTION_DESCRIPTION
    
    # Cancelar
    if update.message.text == f'{Emojis.ERROR} Cancelar':
        await update.message.reply_text(Messages.CANCELLED)
        context.user_data.clear()
        return await finance_menu(update, context)
    
    # Validar descri√ß√£o
    description = update.message.text.strip()
    if not description:
        await update.message.reply_text(Messages.ERROR_DESCRIPTION_EMPTY)
        return ConversationStates.TRANSACTION_DESCRIPTION
    
    # Armazenar descri√ß√£o
    context.user_data['description'] = description[:Config.MAX_DESCRIPTION_LENGTH]
    
    # Pedir m√©todo de pagamento
    transaction_type = context.user_data['transaction_type']
    
    await update.message.reply_text(
        f"Selecione a forma de {'pagamento' if transaction_type == TransactionType.EXPENSE else 'recebimento'}:",
        reply_markup=Keyboards.payment_methods(transaction_type)
    )
    
    return ConversationStates.TRANSACTION_PAYMENT_METHOD


async def transaction_payment_method_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa o m√©todo de pagamento"""
    if not update.message or not update.message.text:
        return ConversationStates.TRANSACTION_PAYMENT_METHOD
    
    # Cancelar
    if update.message.text == f'{Emojis.ERROR} Cancelar':
        await update.message.reply_text(Messages.CANCELLED)
        context.user_data.clear()
        return await finance_menu(update, context)
    
    # Armazenar m√©todo
    from config import PaymentMethods
    payment_method = PaymentMethods.get_method_key(update.message.text)
    context.user_data['payment_method'] = payment_method
    
    # Pedir data
    await update.message.reply_text(
        Messages.ASK_DATE,
        reply_markup=Keyboards.date_selection()
    )
    
    return ConversationStates.TRANSACTION_DATE


async def transaction_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa a data da transa√ß√£o"""
    if not update.message or not update.message.text:
        return ConversationStates.TRANSACTION_DATE
    
    # Cancelar
    if update.message.text == f'{Emojis.ERROR} Cancelar':
        await update.message.reply_text(Messages.CANCELLED)
        context.user_data.clear()
        return await finance_menu(update, context)
    
    try:
        # Processar data
        text = update.message.text
        
        if text == 'üìÖ Hoje':
            date = datetime.now()
        elif text == 'üìÖ Ontem':
            date = datetime.now() - timedelta(days=1)
        elif text == 'üìÖ Esta Semana':
            date = datetime.now() - timedelta(days=datetime.now().weekday())
        elif text == 'üìÖ Este M√™s':
            date = datetime.now().replace(day=1)
        elif text == '‚úèÔ∏è Digitar Data':
            await update.message.reply_text(
                "Digite a data no formato DD/MM/AAAA:",
                reply_markup=Keyboards.cancel_only()
            )
            return ConversationStates.TRANSACTION_DATE
        else:
            # Tentar parsear data digitada
            date = parse_date(text)
            
            # Validar data futura
            if date > datetime.now():
                await update.message.reply_text(Messages.ERROR_FUTURE_DATE)
                return ConversationStates.TRANSACTION_DATE
        
        # Armazenar data
        context.user_data['date'] = date
        
        # Buscar categorias do usu√°rio
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            transaction_type = context.user_data['transaction_type']
            
            categories = CategoryService.get_user_categories(
                session,
                user,
                category_type=transaction_type
            )
        
        if not categories:
            await update.message.reply_text(
                "‚ùå Nenhuma categoria encontrada. Criando categoria padr√£o...",
                reply_markup=Keyboards.finance_menu()
            )
            # Aqui voc√™ poderia criar uma categoria padr√£o
            return ConversationStates.FINANCE_MENU
        
        # Pedir categoria
        await update.message.reply_text(
            Messages.ASK_CATEGORY,
            reply_markup=Keyboards.categories(categories)
        )
        
        return ConversationStates.TRANSACTION_CATEGORY
        
    except ValueError:
        await update.message.reply_text(Messages.ERROR_INVALID_DATE)
        return ConversationStates.TRANSACTION_DATE


async def transaction_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa a categoria e finaliza a transa√ß√£o"""
    if not update.message or not update.message.text:
        return ConversationStates.TRANSACTION_CATEGORY
    
    # Cancelar
    if update.message.text == f'{Emojis.ERROR} Cancelar':
        await update.message.reply_text(Messages.CANCELLED)
        context.user_data.clear()
        return await finance_menu(update, context)
    
    # Nova categoria
    if update.message.text == '‚ûï Nova Categoria':
        context.user_data['creating_category'] = True
        await update.message.reply_text(
            "Digite o nome da nova categoria:",
            reply_markup=Keyboards.cancel_only()
        )
        return ConversationStates.CATEGORY_NAME
    
    try:
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
            # Buscar categoria
            category_name = update.message.text
            transaction_type = context.user_data['transaction_type']
            
            category = session.query(Category).filter(
                Category.user_id == user.id,
                Category.name == category_name,
                Category.type == transaction_type
            ).first()
            
            if not category:
                await update.message.reply_text(Messages.ERROR_CATEGORY_NOT_FOUND)
                return ConversationStates.TRANSACTION_CATEGORY
            
            # Criar transa√ß√£o
            transaction = TransactionService.create_transaction(
                session=session,
                user=user,
                category=category,
                amount=context.user_data['amount'],
                description=context.user_data['description'],
                payment_method=context.user_data['payment_method'],
                date=context.user_data['date'],
                transaction_type=transaction_type
            )
            
            # Mensagem de sucesso
            emoji = Emojis.MONEY_IN if transaction_type == TransactionType.INCOME else Emojis.MONEY_OUT
            
            success_message = Messages.SUCCESS_TRANSACTION.format(
                emoji=emoji,
                description=transaction.description,
                amount=transaction.amount,
                category=category.name,
                date=transaction.date.strftime('%d/%m/%Y')
            )
            
            await update.message.reply_text(
                success_message,
                parse_mode='Markdown',
                reply_markup=Keyboards.finance_menu()
            )
            
            # Limpar dados tempor√°rios
            context.user_data.clear()
            
            return ConversationStates.FINANCE_MENU
            
    except ValueError as e:
        await update.message.reply_text(f"‚ùå Erro: {str(e)}")
        return ConversationStates.TRANSACTION_CATEGORY
    except Exception as e:
        logger.error(f"Erro ao criar transa√ß√£o: {e}")
        await update.message.reply_text(Messages.ERROR_SAVE_FAILED)
        context.user_data.clear()
        return await finance_menu(update, context)


# ==================== VISUALIZA√á√ïES ====================

async def show_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe as √∫ltimas transa√ß√µes do usu√°rio"""
    try:
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
            # Buscar transa√ß√µes
            transactions = TransactionService.get_user_transactions(
                session,
                user,
                limit=Config.MAX_TRANSACTIONS_PER_PAGE
            )
            
            if not transactions:
                await update.message.reply_text(
                    Messages.NO_TRANSACTIONS,
                    reply_markup=Keyboards.finance_menu()
                )
                return ConversationStates.FINANCE_MENU
            
            # Montar mensagem
            message = "*üìã √öltimas Transa√ß√µes*\n\n"
            
            for t in transactions:
                emoji = Emojis.MONEY_IN if t.type == TransactionType.INCOME else Emojis.MONEY_OUT
                signal = "+" if t.type == TransactionType.INCOME else "-"
                
                message += f"{emoji} *{t.date.strftime('%d/%m')}* - {t.description}\n"
                message += f"   {signal}{format_currency(t.amount)} ({t.category.name})\n"
                message += f"   _{t.payment_method}_\n\n"
            
            # Adicionar resumo
            total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
            total_expense = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
            
            message += f"*Resumo:*\n"
            message += f"Receitas: +{format_currency(total_income)}\n"
            message += f"Despesas: -{format_currency(total_expense)}\n"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=Keyboards.finance_menu()
            )
            
    except Exception as e:
        logger.error(f"Erro ao exibir transa√ß√µes: {e}")
        await update.message.reply_text(
            Messages.ERROR_GENERIC,
            reply_markup=Keyboards.finance_menu()
        )
    
    return ConversationStates.FINANCE_MENU


async def show_financial_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe resumo financeiro do m√™s atual"""
    try:
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
            # Obter resumo do m√™s atual
            now = datetime.now()
            summary = TransactionService.get_monthly_summary(
                session,
                user,
                now.year,
                now.month
            )
            
            # Obter score de sa√∫de financeira
            health_score, health_status = TransactionService.get_financial_health_score(
                session,
                user
            )
            
            # Determinar emoji do status
            if health_score >= 80:
                status_emoji = Emojis.GREEN
            elif health_score >= 60:
                status_emoji = Emojis.YELLOW
            else:
                status_emoji = Emojis.RED
            
            # Montar mensagem
            message = f"*üìä Resumo Financeiro - {summary['period']}*\n\n"
            
            message += f"{status_emoji} *Status:* {health_status} ({health_score}/100)\n\n"
            
            message += f"*üìà N√∫meros do M√™s:*\n"
            message += f"‚Ä¢ Receitas: +{format_currency(summary['total_income'])}\n"
            message += f"‚Ä¢ Despesas: -{format_currency(summary['total_expenses'])}\n"
            message += f"‚Ä¢ Saldo: {format_currency(summary['balance'])}\n"
            message += f"‚Ä¢ Taxa de Poupan√ßa: {summary['savings_rate']:.1f}%\n"
            message += f"‚Ä¢ Transa√ß√µes: {summary['transaction_count']}\n"
            
            if summary['expenses_by_category']:
                message += f"\n*üí∏ Principais Gastos:*\n"
                
                # Ordenar por valor
                sorted_expenses = sorted(
                    summary['expenses_by_category'].items(),
                    key=lambda x: x[1],
                    reverse=True
                )
                
                for category, amount in sorted_expenses[:5]:
                    percentage = (amount / summary['total_expenses'] * 100) if summary['total_expenses'] > 0 else 0
                    message += f"‚Ä¢ {category}: {format_currency(amount)} ({percentage:.1f}%)\n"
            
            # Adicionar dica baseada no status
            if health_score < 40:
                message += f"\nüí° *Dica:* Seus gastos est√£o altos. Analise suas despesas e identifique onde pode economizar."
            elif health_score < 60:
                message += f"\nüí° *Dica:* Voc√™ est√° no caminho certo! Tente aumentar sua taxa de poupan√ßa para 20% ou mais."
            else:
                message += f"\nüí° *Dica:* Excelente controle financeiro! Continue assim e considere investir suas economias."
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=Keyboards.finance_menu()
            )
            
    except Exception as e:
        logger.error(f"Erro ao exibir resumo: {e}")
        await update.message.reply_text(
            Messages.ERROR_GENERIC,
            reply_markup=Keyboards.finance_menu()
        )
    
    return ConversationStates.FINANCE_MENU


async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe as categorias do usu√°rio"""
    try:
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
            # Buscar categorias
            income_categories = CategoryService.get_user_categories(
                session,
                user,
                category_type=TransactionType.INCOME
            )
            
            expense_categories = CategoryService.get_user_categories(
                session,
                user,
                category_type=TransactionType.EXPENSE
            )
            
            # Montar mensagem
            message = "*üè∑Ô∏è Suas Categorias*\n\n"
            
            if income_categories:
                message += f"*{Emojis.MONEY_IN} Receitas:*\n"
                for cat in income_categories:
                    icon = cat.icon or ""
                    system = " _(padr√£o)_" if cat.is_system else ""
                    message += f"‚Ä¢ {icon} {cat.name}{system}\n"
            
            if expense_categories:
                message += f"\n*{Emojis.MONEY_OUT} Despesas:*\n"
                for cat in expense_categories:
                    icon = cat.icon or ""
                    system = " _(padr√£o)_" if cat.is_system else ""
                    message += f"‚Ä¢ {icon} {cat.name}{system}\n"
            
            message += f"\n_Total de categorias: {len(income_categories) + len(expense_categories)}/{Config.MAX_CATEGORIES_PER_USER}_"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=Keyboards.finance_menu()
            )
            
    except Exception as e:
        logger.error(f"Erro ao exibir categorias: {e}")
        await update.message.reply_text(
            Messages.ERROR_GENERIC,
            reply_markup=Keyboards.finance_menu()
        )
    
    return ConversationStates.FINANCE_MENU


async def show_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe an√°lise detalhada das finan√ßas"""
    # TODO: Implementar an√°lise detalhada com gr√°ficos
    await update.message.reply_text(
        "*üìà An√°lise Detalhada*\n\n"
        "_Esta funcionalidade ser√° implementada em breve!_\n\n"
        "Aqui voc√™ poder√°:\n"
        "‚Ä¢ Ver gr√°ficos de evolu√ß√£o\n"
        "‚Ä¢ Comparar per√≠odos\n"
        "‚Ä¢ Analisar tend√™ncias\n"
        "‚Ä¢ Prever gastos futuros",
        parse_mode='Markdown',
        reply_markup=Keyboards.finance_menu()
    )
    return ConversationStates.FINANCE_MENU


async def show_financial_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe dicas financeiras personalizadas"""
    try:
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
            # Obter dados para an√°lise
            health_score, _ = TransactionService.get_financial_health_score(session, user)
            
            # Gerar dicas baseadas no perfil
            tips = [
                "üí° *Dicas Financeiras Personalizadas*\n"
            ]
            
            if health_score < 40:
                tips.extend([
                    "\nüî¥ *Aten√ß√£o Urgente:*",
                    "‚Ä¢ Revise todos os seus gastos mensais",
                    "‚Ä¢ Identifique despesas que podem ser cortadas",
                    "‚Ä¢ Crie um or√ßamento mensal e siga rigorosamente",
                    "‚Ä¢ Evite compras por impulso",
                    "‚Ä¢ Considere fontes adicionais de renda"
                ])
            elif health_score < 70:
                tips.extend([
                    "\nüü° *Melhorias Recomendadas:*",
                    "‚Ä¢ Aumente sua taxa de poupan√ßa para 20%",
                    "‚Ä¢ Crie uma reserva de emerg√™ncia (3-6 meses)",
                    "‚Ä¢ Revise assinaturas e servi√ßos n√£o utilizados",
                    "‚Ä¢ Planeje compras grandes com anteced√™ncia",
                    "‚Ä¢ Comece a investir o valor poupado"
                ])
            else:
                tips.extend([
                    "\nüü¢ *Otimiza√ß√µes Avan√ßadas:*",
                    "‚Ä¢ Diversifique seus investimentos",
                    "‚Ä¢ Considere investimentos de longo prazo",
                    "‚Ä¢ Otimize sua declara√ß√£o de IR",
                    "‚Ä¢ Explore renda passiva",
                    "‚Ä¢ Planeje aposentadoria antecipada"
                ])
            
            tips.extend([
                "\nüìö *Educa√ß√£o Financeira:*",
                "‚Ä¢ Leia livros sobre finan√ßas pessoais",
                "‚Ä¢ Acompanhe canais de educa√ß√£o financeira",
                "‚Ä¢ Participe de comunidades de investidores",
                "‚Ä¢ Mantenha-se atualizado sobre economia"
            ])
            
            await update.message.reply_text(
                "\n".join(tips),
                parse_mode='Markdown',
                reply_markup=Keyboards.finance_menu()
            )
            
    except Exception as e:
        logger.error(f"Erro ao gerar dicas: {e}")
        await update.message.reply_text(
            Messages.ERROR_GENERIC,
            reply_markup=Keyboards.finance_menu()
        )
    
    return ConversationStates.FINANCE_MENU


# ==================== NOVA CATEGORIA ====================

async def category_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa o nome da nova categoria"""
    if not update.message or not update.message.text:
        return ConversationStates.CATEGORY_NAME
    
    # Cancelar
    if update.message.text == f'{Emojis.ERROR} Cancelar':
        await update.message.reply_text(Messages.CANCELLED)
        context.user_data.clear()
        return await finance_menu(update, context)
    
    try:
        category_name = update.message.text.strip()
        
        if not category_name:
            await update.message.reply_text("‚ùå Nome n√£o pode estar vazio")
            return ConversationStates.CATEGORY_NAME
        
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            transaction_type = context.user_data['transaction_type']
            
            # Criar categoria
            category = CategoryService.create_category(
                session=session,
                user=user,
                name=category_name,
                category_type=transaction_type
            )
            
            # Continuar com a transa√ß√£o usando a nova categoria
            context.user_data['category_id'] = category.id
            
            # Criar transa√ß√£o
            transaction = TransactionService.create_transaction(
                session=session,
                user=user,
                category=category,
                amount=context.user_data['amount'],
                description=context.user_data['description'],
                payment_method=context.user_data['payment_method'],
                date=context.user_data['date'],
                transaction_type=transaction_type
            )
            
            # Mensagem de sucesso
            emoji = Emojis.MONEY_IN if transaction_type == TransactionType.INCOME else Emojis.MONEY_OUT
            
            success_message = (
                f"‚úÖ Categoria '{category_name}' criada!\n\n" +
                Messages.SUCCESS_TRANSACTION.format(
                    emoji=emoji,
                    description=transaction.description,
                    amount=transaction.amount,
                    category=category.name,
                    date=transaction.date.strftime('%d/%m/%Y')
                )
            )
            
            await update.message.reply_text(
                success_message,
                parse_mode='Markdown',
                reply_markup=Keyboards.finance_menu()
            )
            
            # Limpar dados tempor√°rios
            context.user_data.clear()
            
            return ConversationStates.FINANCE_MENU
            
    except ValueError as e:
        await update.message.reply_text(f"‚ùå {str(e)}")
        return ConversationStates.CATEGORY_NAME
    except Exception as e:
        logger.error(f"Erro ao criar categoria: {e}")
        await update.message.reply_text(Messages.ERROR_SAVE_FAILED)
        context.user_data.clear()
        return await finance_menu(update, context)