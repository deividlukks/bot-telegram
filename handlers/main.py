"""
Handlers principais do bot
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes

from config import Messages, Emojis
from database import db
from keyboards import Keyboards
from services import UserService
from states import ConversationStates
from utils import get_user_from_update

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handler do comando /start"""
    try:
        # Obter ou criar usu√°rio
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
        # Mensagem de boas-vindas
        welcome_message = Messages.WELCOME.format(
            name=update.effective_user.first_name or "Usu√°rio"
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=Keyboards.main_menu()
        )
        
        return ConversationStates.MAIN_MENU
        
    except Exception as e:
        logger.error(f"Erro no comando start: {e}")
        await update.message.reply_text(Messages.ERROR_GENERIC)
        return ConversationStates.MAIN_MENU


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Exibe o menu principal"""
    await update.message.reply_text(
        "Menu Principal:",
        reply_markup=Keyboards.main_menu()
    )
    return ConversationStates.MAIN_MENU


async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa as op√ß√µes do menu principal"""
    if not update.message or not update.message.text:
        return ConversationStates.MAIN_MENU
    
    text = update.message.text
    
    # Importar handlers espec√≠ficos
    from .finance import finance_menu
    from .investment import investment_menu
    from .settings import settings_menu
    
    if text == 'üí∞ Finan√ßas Pessoais' or text == '/financas':
        return await finance_menu(update, context)
    
    elif text == 'üìà Investimentos' or text == '/investimentos':
        return await investment_menu(update, context)
    
    elif text == 'üíπ Trading':
        await update.message.reply_text(
            "*üíπ M√≥dulo Trading*\n\n"
            "üîç An√°lise T√©cnica em Tempo Real\n"
            "üìä Sinais de Day Trade\n"
            "üí± Forex e Criptomoedas\n\n"
            "_Este m√≥dulo ser√° implementado em breve!_\n\n"
            "Fique atento √†s atualiza√ß√µes! üöÄ",
            parse_mode='Markdown',
            reply_markup=Keyboards.main_menu()
        )
        return ConversationStates.MAIN_MENU
    
    elif text == 'üìä Relat√≥rios' or text == '/relatorios':
        return await generate_reports(update, context)
    
    elif text == '‚öôÔ∏è Configura√ß√µes' or text == '/configuracoes':
        return await settings_menu(update, context)
    
    elif text == '‚ùì Ajuda':
        return await help_command(update, context)
    
        # Se n√£o reconheceu o comando, n√£o faz nada ou envia uma mensagem de ajuda
    await update.message.reply_text(
        "Op√ß√£o inv√°lida. Por favor, use os bot√µes do menu."
    )
    return ConversationStates.MAIN_MENU # Mant√©m o estado atual


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Comando de ajuda"""
    help_text = """
*ü§ñ Finance Bot - Central de Ajuda*

*üìå Comandos Principais:*
/start - Reiniciar o bot
/help - Esta mensagem de ajuda
/cancel - Cancelar opera√ß√£o atual
/financas - Ir para menu de finan√ßas
/investimentos - Ir para menu de investimentos
/relatorios - Gerar relat√≥rios
/configuracoes - Abrir configura√ß√µes

*üí∞ M√≥dulo de Finan√ßas:*
‚Ä¢ Registre receitas e despesas
‚Ä¢ Categorize seus gastos
‚Ä¢ Acompanhe seu saldo mensal
‚Ä¢ Receba an√°lises de sa√∫de financeira
‚Ä¢ Visualize relat√≥rios detalhados

*üìà M√≥dulo de Investimentos:*
‚Ä¢ Registre compra e venda de ativos
‚Ä¢ Acompanhe sua carteira
‚Ä¢ Receba alertas de dividendos
‚Ä¢ An√°lise de performance
‚Ä¢ Sugest√µes baseadas em seu perfil

*üí° Dicas de Uso:*
‚Ä¢ Use os bot√µes do menu para navegar
‚Ä¢ Valores podem usar v√≠rgula ou ponto
‚Ä¢ Datas devem estar no formato DD/MM/AAAA
‚Ä¢ Voc√™ pode cancelar qualquer opera√ß√£o com /cancel

*üîß Problemas Comuns:*
‚Ä¢ *Valor inv√°lido*: Use apenas n√∫meros (ex: 150,50)
‚Ä¢ *Data inv√°lida*: Use DD/MM/AAAA
‚Ä¢ *Bot travado*: Use /cancel ou /start

*üìû Suporte:*
Em caso de problemas, entre em contato:
@seu_usuario_suporte

*üìö Recursos Adicionais:*
‚Ä¢ [Guia de Finan√ßas Pessoais](https://exemplo.com/guia)
‚Ä¢ [Canal de Dicas](https://t.me/canal_exemplo)
‚Ä¢ [Grupo de Discuss√£o](https://t.me/grupo_exemplo)
"""
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=Keyboards.main_menu()
    )
    
    return ConversationStates.MAIN_MENU


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela a opera√ß√£o atual e volta ao menu principal"""
    # Limpar dados do contexto
    context.user_data.clear()
    
    await update.message.reply_text(
        f"{Emojis.WARNING} Opera√ß√£o cancelada.\n\nVoltando ao menu principal...",
        reply_markup=Keyboards.main_menu()
    )
    
    return ConversationStates.MAIN_MENU


async def generate_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Gera relat√≥rios financeiros"""
    try:
        await update.message.reply_text(
            "üìä *Gerando seus relat√≥rios...*",
            parse_mode='Markdown'
        )
        
        with db.get_session() as session:
            user = get_user_from_update(update, session)
            
            # Importar servi√ßos necess√°rios
            from services import TransactionService, InvestmentService
            from datetime import datetime
            
            # Obter dados do m√™s atual
            now = datetime.now()
            
            # Resumo financeiro
            financial_summary = TransactionService.get_monthly_summary(
                session, user, now.year, now.month
            )
            
            # Resumo de investimentos
            portfolio_summary = InvestmentService.get_portfolio_summary(
                session, user
            )
            
            # Score de sa√∫de
            health_score, health_status = TransactionService.get_financial_health_score(
                session, user
            )
        
        # Montar relat√≥rio
        report = f"""
*üìä Relat√≥rio Completo - {now.strftime('%B/%Y')}*

*üí∞ Resumo Financeiro:*
‚Ä¢ Receitas: {format_currency(financial_summary['total_income'])}
‚Ä¢ Despesas: {format_currency(financial_summary['total_expenses'])}
‚Ä¢ Saldo: {format_currency(financial_summary['balance'])}
‚Ä¢ Taxa de Poupan√ßa: {financial_summary['savings_rate']:.1f}%

*üè• Sa√∫de Financeira:*
‚Ä¢ Score: {health_score}/100
‚Ä¢ Status: {health_status}

*üìà Carteira de Investimentos:*
‚Ä¢ Total Investido: {format_currency(portfolio_summary['total_invested'])}
‚Ä¢ Valor Atual: {format_currency(portfolio_summary['total_current'])}
‚Ä¢ Rentabilidade: {portfolio_summary['profit_percentage']:.1f}%
"""
        
        # Adicionar breakdown por tipo de investimento
        if portfolio_summary['by_type']:
            report += "\n*Distribui√ß√£o por Tipo:*\n"
            for inv_type, data in portfolio_summary['by_type'].items():
                report += f"‚Ä¢ {inv_type}: {format_currency(data['total_invested'])} ({data['percentage']:.1f}%)\n"
        
        # TODO: Aqui voc√™ poderia gerar gr√°ficos e envi√°-los como imagens
        
        await update.message.reply_text(
            report,
            parse_mode='Markdown',
            reply_markup=Keyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Erro ao gerar relat√≥rios: {e}")
        await update.message.reply_text(
            Messages.ERROR_GENERIC,
            reply_markup=Keyboards.main_menu()
        )
    
    return ConversationStates.MAIN_MENU


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler global de erros"""
    logger.error(f"Exce√ß√£o durante processamento: {context.error}", exc_info=context.error)
    
    # Tentar notificar o usu√°rio
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                f"{Emojis.ERROR} Ocorreu um erro inesperado.\n\n"
                "Por favor, tente novamente ou use /start para reiniciar.",
                reply_markup=Keyboards.main_menu()
            )
    except Exception:
        # Se falhar ao notificar, apenas logar
        pass


# Importar format_currency que estava faltando
from utils import format_currency